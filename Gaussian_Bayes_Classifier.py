# -*- coding: utf-8 -*-
"""Gaussian Bayes Classifier from scratch

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qxdFPVjBZw194MMnHOwX_uz-bVoBWJc2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

'''Question 1: Gaussian Bayes implimentation from scratch
    using numpy and pandas only, cov_matrix= varianc
    variant = independent (for case 1 where cov_matrix= variance*I )
    variant = same (for case 2 where cov_matrix is same for all classes)
    variant = different (for case 3 where cov_matrix is actual cov_matrix is actual covariance)
'''
class GaussianBayes:
    # input the variant you want to use with the declaration of class
    def __init__(self, variant="different"):
        self.variant = variant

    def train(self, X_train, y_train):
        GaussianBayes.mean = {}
        std = 0
        GaussianBayes.cov = {}
        GaussianBayes.priors = {}
        #iterate over each unique class
        for c in np.unique(y_train):
            X_c = X_train[y_train == c]
            GaussianBayes.mean[c] = np.mean(X_c, axis=0)
            GaussianBayes.priors[c] = np.size(X_c)/np.size(X_train)
            std += np.std(X_c, axis=0)

        GaussianBayes.std_mean = np.mean(np.array(std))

        if(self.variant == "same"):
            GaussianBayes.cov = np.cov(X_train.T)

        elif(self.variant == "different"):
            for c in np.unique(y_train):
                X_c = X_train[y_train == c]
                GaussianBayes.cov[c] = np.ma.cov(np.array(X_c).T)

        GaussianBayes.uniques = np.unique(y_train)

    def test(self, X_test, y_test):

        pred_class=self.predict(X_test)

        pred_class = np.array(pred_class)
        true_class = np.array(y_test)

        correct_pred = 0
        for i in range(len(pred_class)):
            if pred_class[i] == true_class[i]:
                correct_pred += 1
        return correct_pred/len(pred_class)

    def predict(self, X_test):
        pred_class = []
        for sample in np.array(X_test):
            values = []

            if(self.variant == "different"):

                for c in GaussianBayes.uniques:

                    x = (sample-GaussianBayes.mean[c])
                    cov_inv = np.linalg.inv(GaussianBayes.cov[c])

                    x_new = -0.5 *(x) @ cov_inv @ (x).T

                    det = np.linalg.det(GaussianBayes.cov[c])

                    value = x_new - 0.5 * np.log(det) + np.log(GaussianBayes.priors[c])
                    values.append(value)

                pred=np.argmax(np.array(values))+1

                pred_class.append(pred)

            if(self.variant == "same"):

                for c in GaussianBayes.uniques:

                    x = (sample-GaussianBayes.mean[c])
                    cov_inv = np.linalg.inv(GaussianBayes.cov)

                    x_new = -0.5 *(x).T @ cov_inv @ (x).T
                    value = x_new

                    values.append(value)
                pred=np.argmax(np.array(values))+1
                # print(np.argmax(values))
                pred_class.append(pred)

            if(self.variant == "independent"):

                for c in GaussianBayes.uniques:
                    x = (sample-GaussianBayes.mean[c])
                    # cov_inv=np.linalg.inv(GaussianBayes.cov)

                    x_new = -0.5 *(x) @ (x).T
                    value = x_new/GaussianBayes.std_mean
                    values.append(value)
                    # print(value)
                # values=np.array(values + "*")
                pred=np.argmax(np.array(values))+1
                # print(np.argmax(values))
                pred_class.append(pred)

        return np.array(pred_class)

# dataframe=pd.read_csv("new.csv")
